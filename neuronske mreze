#inlcude <iostream>
#include <cmath>

using namespace std;

enum TipMreze {DUBOKA, OBICNA};

class NeuronskaMreza
{
private:
int brSkrivenihSlojeva;
int brNeuronaPoSloju;

public:
NeuronskaMreza(int br1, int br2) 
{
if(br1<0)
brSkrivenihSlojeva=0;
else
brSkrivenihSlojeva=br1; 

if(br2<0)
brNeuronaPoSloju=0;
else
brNeuronaPoSloju=br2;
}

void dodajSkriveniSloj()
{
brSkrivenihSlojeva+=1;
cout<<"Broj skrivenih slojeva iznosi" brSkrivenihSlojeva<<endl;
}

void dodajNeuron()
{
brNeuronaPoSloju+=;
cout<<"Broj neurona po sloju iznosi" brNeuronaPoSloju<<endl;
}

double izracunajUspeh() const 
{
double tacnost = 1 - 1/(log(brSkrivenihSlojeva * brNeuronaPoSloju);
return tacnost;
}

TipMreze getTipMreze() const 
{
if(brNeuronaPoSloju>=1000)
TipMreze tip=DUBOKA;
else
TipMreze tip=OBICNA;

return tip;
}
};

enum StanjeTesta {START, PROCESIRANJE, OPTIMIZACIJA, KRAJ};
enum TipOptimizacije {DODAJ_SLOJ, DODAJ_NEURON};

klasa Test
{
private:
NeuronskaMreza nm;
double zeljeniProcenatUspeha;
int brOptimizacija;
StanjeTesta stanje;

public:
Test(double pr) : nm(3,200)
{
if(!(br>=0 && br<=1))
zeljeniProcenatUspeha=0.85;
else
zeljeniProcenatUspeha=pr;

stanje=START;
brOptimizacija=0;
}

bool procesiraj() 
{
if(stanje==START || stanje==OPTIMIZACIJA)
{
if(zeljeniProcenatUspeha>nm.izracunajUspeh())
{
stanje=PROCESIRANJE;
}
else
{
stanje=KRAJ;
cout<<"Broj optimizacija iznosi" brOptimizacija<<endl;
cout<<"Zeljena uspesnost iznosi" zeljeniProcenatUspeha<<endl;
cout<<"Tacnost iznosi" nm.izracunajUspeh()<<endl;
cout<<"Test uspesno zavrsen!"<<endl;
}
return true;
}else{
return false;
}
}

bool potrebnoOptimizovati()
{
if(stanje==PROCESIRANJE)
{
stanje=OPTIMIZACIJA;
return true;
}else{
return false;
}
}

bool optimizuj(TipOptimizacije t)
{
if (stanje==OPTIMIZACIJA)
{
   if(t==DODAJ_SLOJ)
   brSkrivenihSlojeva+=1;
   else if(t=DODAJ_NEURON)
   brNeuronaPoSloju+=1;
   
return true;
} else {
return false;
}
}

double izracunajUspeh() const
{
return nm.izracunajUspeh();
}

TipMreze getTipMreze() const
{
return nm.getTipMreze();
}

StanjeTesta getStanje() const
{
return stanje;
}
};

void ispisiTest(const Test &test)
{

cout<<"Stanje: "<<endl;
if(test.getStanje==START)
cout<<"START"<<endl;
else if(test.getStanje==OPTIMIZACIJA)
cout<<"OPTIMIZACIJA"<<endl;
else if(test.getStanje==PROCESIRANJE)
cout<<"PROCESIRANJE"<<endl;
else if(test.getStanje==KRAJ)
cout<<"KRAJ"<<endl;

cout<<"Tip neuronske mreze: "<<endl
if(test.getTipMreze()==DUBOKA)
cout<<"DUBOKA"<<endl;
else if(test.getTipMreze()==OBICNA)
cout<<"OBICNA"<<endl;

cout<<"Trenutna tacnost neuronske mreze: " test.izracunajUspeh()<<endl;

}

int meni()
{
int op;
cout<<"1.Procesiraj"<<endl;
cout<<"2.Potrebno optimizovati"<<endl;
cout<<"3.Optimizuj"<<endl
cout<<"4.Kraj"<<endl;
cin>>op;
return op;
}

int main()
{
int opp;
bool b;
Test testt(1.00);

do{
opp=meni();

switch(opp)
{
case 1:
b=testt.procesiraj();
break;
case 2:
b=testt.potrebnoOptimizovati();
break;
case 3:
cout<<"Izaberite tip optimizacije [1-dodaj sloj, 2-dodaj neuron]: "<<endl;
int tipOp;
cin>>tipOp;
if(tipOp==1)
b=testt.optimizuj(DODAJ_SLOJ);
else if(tipOp==2)
b=testt.optimizuj(DODAJ_NEURON);
break;
}
if(b=true)
ispisiTest(testt);

}while(opp>=1 && opp<4);

return 0;
}





